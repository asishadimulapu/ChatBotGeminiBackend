{"version":3,"sources":["authController.js"],"names":["bcrypt","require","jwt","User","exports","register","req","res","next","body","name","email","password","findOne","existingUser","status","json","msg","saltRounds","hash","hashedPassword","create","trim","toLowerCase","user","id","_id","login","compare","isPasswordValid","token","sign","userId","process","env","JWT_SECRET","expiresIn"],"mappings":"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","sourcesContent":["const bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst User = require('../models/User');\r\n\r\nexports.register = async (req, res, next) => {\r\n  try {\r\n    const { name, email, password } = req.body;\r\n    \r\n    // Check if user already exists\r\n    const existingUser = await User.findOne({ email });\r\n    if (existingUser) {\r\n      return res.status(400).json({ msg: 'User already exists with this email' });\r\n    }\r\n\r\n    // Hash password with higher salt rounds for better security\r\n    const saltRounds = 12;\r\n    const hashedPassword = await bcrypt.hash(password, saltRounds);\r\n    \r\n    // Create user\r\n    const user = await User.create({ \r\n      name: name.trim(), \r\n      email: email.toLowerCase().trim(), \r\n      password: hashedPassword \r\n    });\r\n\r\n    res.status(201).json({ \r\n      msg: 'User registered successfully',\r\n      user: {\r\n        id: user._id,\r\n        name: user.name,\r\n        email: user.email\r\n      }\r\n    });\r\n  } catch (err) {\r\n    next(err); // Pass error to error handling middleware\r\n  }\r\n};\r\n\r\nexports.login = async (req, res, next) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n    \r\n    // Find user and include password for comparison\r\n    const user = await User.findOne({ email: email.toLowerCase().trim() });\r\n    if (!user) {\r\n      return res.status(400).json({ msg: 'Invalid email or password' });\r\n    }\r\n\r\n    // Compare password\r\n    const isPasswordValid = await bcrypt.compare(password, user.password);\r\n    if (!isPasswordValid) {\r\n      return res.status(400).json({ msg: 'Invalid email or password' });\r\n    }\r\n\r\n    // Generate JWT token with expiration\r\n    const token = jwt.sign(\r\n      { userId: user._id }, \r\n      process.env.JWT_SECRET,\r\n      { expiresIn: '24h' } // Token expires in 24 hours\r\n    );\r\n\r\n    res.json({ \r\n      token, \r\n      user: { \r\n        id: user._id, \r\n        name: user.name,\r\n        email: user.email\r\n      }\r\n    });\r\n  } catch (err) {\r\n    next(err); // Pass error to error handling middleware\r\n  }\r\n};\r\n"],"file":"authController.dev.js"}