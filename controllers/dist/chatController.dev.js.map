{"version":3,"sources":["chatController.js"],"names":["Chat","require","askGemini","validateInput","exports","createChat","req","res","next","prompt","body","validatedPrompt","response","create","userId","chat","populate","status","json","message","includes","msg","getChats","page","parseInt","query","limit","skip","find","sort","createdAt","chats","countDocuments","totalChats","totalPages","Math","ceil","pagination","currentPage","hasNextPage","hasPrevPage","deleteChat","chatId","params","id","findOneAndDelete","_id","deletedChat"],"mappings":"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","sourcesContent":["const Chat = require('../models/Chat');\r\nconst { askGemini, validateInput } = require('../gemini/geminiClient');\r\n\r\nexports.createChat = async (req, res, next) => {\r\n  try {\r\n    const { prompt } = req.body;\r\n    \r\n    // Validate input\r\n    const validatedPrompt = validateInput(prompt);\r\n    \r\n    // Get response from Gemini\r\n    const response = await askGemini(validatedPrompt);\r\n\r\n    // Create chat entry\r\n    const chat = await Chat.create({\r\n      userId: req.userId,\r\n      prompt: validatedPrompt,\r\n      response\r\n    });\r\n\r\n    // Populate user info if needed\r\n    await chat.populate('userId', 'name email');\r\n\r\n    res.status(201).json(chat);\r\n  } catch (err) {\r\n    // Handle validation errors specifically\r\n    if (err.message.includes('Input') || err.message.includes('characters')) {\r\n      return res.status(400).json({ msg: err.message });\r\n    }\r\n    next(err); // Pass other errors to error handling middleware\r\n  }\r\n};\r\n\r\nexports.getChats = async (req, res, next) => {\r\n  try {\r\n    // Check if pagination is requested\r\n    const page = parseInt(req.query.page);\r\n    const limit = parseInt(req.query.limit);\r\n    \r\n    if (page && limit) {\r\n      // Paginated response\r\n      const skip = (page - 1) * limit;\r\n\r\n      // Get chats with pagination\r\n      const chats = await Chat.find({ userId: req.userId })\r\n        .sort({ createdAt: -1 })\r\n        .skip(skip)\r\n        .limit(limit)\r\n        .populate('userId', 'name email');\r\n\r\n      // Get total count for pagination info\r\n      const totalChats = await Chat.countDocuments({ userId: req.userId });\r\n      const totalPages = Math.ceil(totalChats / limit);\r\n\r\n      res.json({\r\n        chats,\r\n        pagination: {\r\n          currentPage: page,\r\n          totalPages,\r\n          totalChats,\r\n          hasNextPage: page < totalPages,\r\n          hasPrevPage: page > 1\r\n        }\r\n      });\r\n    } else {\r\n      // Simple response for backward compatibility\r\n      const chats = await Chat.find({ userId: req.userId })\r\n        .sort({ createdAt: -1 })\r\n        .limit(50) // Limit to prevent too much data\r\n        .populate('userId', 'name email');\r\n      \r\n      res.json(chats);\r\n    }\r\n  } catch (err) {\r\n    next(err); // Pass error to error handling middleware\r\n  }\r\n};\r\n\r\nexports.deleteChat = async (req, res, next) => {\r\n  try {\r\n    const chatId = req.params.id;\r\n    \r\n    // Ensure user can only delete their own chats\r\n    const deletedChat = await Chat.findOneAndDelete({ \r\n      _id: chatId, \r\n      userId: req.userId \r\n    });\r\n\r\n    if (!deletedChat) {\r\n      return res.status(404).json({ msg: 'Chat not found or unauthorized' });\r\n    }\r\n\r\n    res.json({ msg: 'Chat deleted successfully' });\r\n  } catch (err) {\r\n    next(err); // Pass error to error handling middleware\r\n  }\r\n};\r\n"],"file":"chatController.dev.js"}