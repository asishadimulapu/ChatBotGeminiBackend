{"version":3,"sources":["chatController.js"],"names":["Chat","require","askGemini","validateInput","exports","createChat","req","res","next","prompt","validatedPrompt","response","chat","regeneratorRuntime","async","_context","prev","awrap","sent","create","userId","populate","json","t0","message","includes","abrupt","msg","stop","getChats","page","limit","skip","chats","totalChats","totalPages","_chats","_context2","parseInt","query","status","find","sort","createdAt","Math","ceil","pagination","currentPage","hasNextPage","hasPrevPage","deleteChat","chatId","_context3","params","id","findOneAndDelete","_id"],"mappings":"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","file":"chatController.min.js","sourcesContent":["const Chat = require('../models/Chat');\r\nconst { askGemini, validateInput } = require('../gemini/geminiClient');\r\n\r\nexports.createChat = async (req, res, next) => {\r\n  try {\r\n    const { prompt } = req.body;\r\n    \r\n    // Validate input\r\n    const validatedPrompt = validateInput(prompt);\r\n    \r\n    // Get response from Gemini\r\n    const response = await askGemini(validatedPrompt);\r\n\r\n    // Create chat entry\r\n    const chat = await Chat.create({\r\n      userId: req.userId,\r\n      prompt: validatedPrompt,\r\n      response\r\n    });\r\n\r\n    // Populate user info if needed\r\n    await chat.populate('userId', 'name email');\r\n\r\n    res.status(201).json(chat);\r\n  } catch (err) {\r\n    // Handle validation errors specifically\r\n    if (err.message.includes('Input') || err.message.includes('characters')) {\r\n      return res.status(400).json({ msg: err.message });\r\n    }\r\n    next(err); // Pass other errors to error handling middleware\r\n  }\r\n};\r\n\r\nexports.getChats = async (req, res, next) => {\r\n  try {\r\n    // Check if pagination is requested\r\n    const page = parseInt(req.query.page);\r\n    const limit = parseInt(req.query.limit);\r\n    \r\n    if (page && limit) {\r\n      // Paginated response\r\n      const skip = (page - 1) * limit;\r\n\r\n      // Get chats with pagination\r\n      const chats = await Chat.find({ userId: req.userId })\r\n        .sort({ createdAt: -1 })\r\n        .skip(skip)\r\n        .limit(limit)\r\n        .populate('userId', 'name email');\r\n\r\n      // Get total count for pagination info\r\n      const totalChats = await Chat.countDocuments({ userId: req.userId });\r\n      const totalPages = Math.ceil(totalChats / limit);\r\n\r\n      res.json({\r\n        chats,\r\n        pagination: {\r\n          currentPage: page,\r\n          totalPages,\r\n          totalChats,\r\n          hasNextPage: page < totalPages,\r\n          hasPrevPage: page > 1\r\n        }\r\n      });\r\n    } else {\r\n      // Simple response for backward compatibility\r\n      const chats = await Chat.find({ userId: req.userId })\r\n        .sort({ createdAt: -1 })\r\n        .limit(50) // Limit to prevent too much data\r\n        .populate('userId', 'name email');\r\n      \r\n      res.json(chats);\r\n    }\r\n  } catch (err) {\r\n    next(err); // Pass error to error handling middleware\r\n  }\r\n};\r\n\r\nexports.deleteChat = async (req, res, next) => {\r\n  try {\r\n    const chatId = req.params.id;\r\n    \r\n    // Ensure user can only delete their own chats\r\n    const deletedChat = await Chat.findOneAndDelete({ \r\n      _id: chatId, \r\n      userId: req.userId \r\n    });\r\n\r\n    if (!deletedChat) {\r\n      return res.status(404).json({ msg: 'Chat not found or unauthorized' });\r\n    }\r\n\r\n    res.json({ msg: 'Chat deleted successfully' });\r\n  } catch (err) {\r\n    next(err); // Pass error to error handling middleware\r\n  }\r\n};\r\n"]}