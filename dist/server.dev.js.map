{"version":3,"sources":["server.js"],"names":["express","require","mongoose","cors","dotenv","helmet","config","validateEnvironment","errorHandler","notFound","generalLimiter","authRoutes","chatRoutes","app","use","contentSecurityPolicy","directives","defaultSrc","styleSrc","scriptSrc","imgSrc","corsOptions","origin","process","env","NODE_ENV","credentials","optionsSuccessStatus","json","limit","urlencoded","extended","get","req","res","status","timestamp","Date","toISOString","uptime","connectDB","connect","MONGO_URI","useNewUrlParser","useUnifiedTopology","conn","console","log","connection","host","error","message","exit","on","close","startServer","PORT","listen"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst cors = require('cors');\r\nconst dotenv = require('dotenv');\r\nconst helmet = require('helmet');\r\n\r\n// Load environment variables first\r\ndotenv.config();\r\n\r\n// Import utilities and middlewares\r\nconst { validateEnvironment } = require('./utils/envValidator');\r\nconst { errorHandler, notFound } = require('./middlewares/errorHandler');\r\nconst { generalLimiter } = require('./middlewares/rateLimiter');\r\n\r\n// Import routes\r\nconst authRoutes = require('./routes/authRoutes');\r\nconst chatRoutes = require('./routes/chatRoutes');\r\n\r\n// Validate environment variables before starting\r\nvalidateEnvironment();\r\n\r\nconst app = express();\r\n\r\n// Security middlewares\r\napp.use(helmet({\r\n  contentSecurityPolicy: {\r\n    directives: {\r\n      defaultSrc: [\"'self'\"],\r\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\r\n      scriptSrc: [\"'self'\"],\r\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\r\n    },\r\n  },\r\n}));\r\n\r\n// CORS configuration - restrict in production\r\nconst corsOptions = {\r\n  origin: process.env.NODE_ENV === 'production' \r\n    ? ['https://your-frontend-domain.com'] // Replace with your actual frontend domain\r\n    : ['http://localhost:3000', 'http://127.0.0.1:3000'],\r\n  credentials: true,\r\n  optionsSuccessStatus: 200\r\n};\r\napp.use(cors(corsOptions));\r\n\r\n// Rate limiting\r\napp.use(generalLimiter);\r\n\r\n// Body parsing middleware\r\napp.use(express.json({ limit: '10mb' }));\r\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\r\n\r\n// API routes\r\napp.use('/api/auth', authRoutes);\r\napp.use('/api/chats', chatRoutes);\r\n\r\n// Health check endpoint\r\napp.get('/health', (req, res) => {\r\n  res.status(200).json({ \r\n    status: 'OK', \r\n    timestamp: new Date().toISOString(),\r\n    uptime: process.uptime()\r\n  });\r\n});\r\n\r\n// 404 handler\r\napp.use(notFound);\r\n\r\n// Global error handler\r\napp.use(errorHandler);\r\n\r\n// MongoDB connection with proper error handling\r\nconst connectDB = async () => {\r\n  try {\r\n    const conn = await mongoose.connect(process.env.MONGO_URI, {\r\n      useNewUrlParser: true,\r\n      useUnifiedTopology: true,\r\n    });\r\n    console.log(`✅ MongoDB Connected: ${conn.connection.host}`);\r\n  } catch (error) {\r\n    console.error('❌ MongoDB connection error:', error.message);\r\n    process.exit(1);\r\n  }\r\n};\r\n\r\n// Graceful shutdown\r\nprocess.on('SIGINT', async () => {\r\n  console.log('\\n🔄 Shutting down gracefully...');\r\n  await mongoose.connection.close();\r\n  console.log('✅ MongoDB connection closed');\r\n  process.exit(0);\r\n});\r\n\r\n// Start server\r\nconst startServer = async () => {\r\n  await connectDB();\r\n  \r\n  const PORT = process.env.PORT || 5000;\r\n  app.listen(PORT, () => {\r\n    console.log(`🚀 Server running on port ${PORT}`);\r\n    console.log(`🌍 Environment: ${process.env.NODE_ENV || 'development'}`);\r\n  });\r\n};\r\n\r\nstartServer();\r\n"],"file":"server.dev.js"}