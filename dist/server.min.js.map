{"version":3,"sources":["server.js"],"names":["express","require","mongoose","dotenv","config","helmet","errorHandler","notFound","generalLimiter","authRoutes","validateEnvironment","app","use","contentSecurityPolicy","defaultSrc","chatRoutes","scriptSrc","imgSrc","directives","env","NODE_ENV","styleSrc","optionsSuccessStatus","cors","corsOptions","origin","limit","urlencoded","extended","get","req","res","Date","toISOString","uptime","process","timestamp","connectDB","conn","regeneratorRuntime","async","_context","prev","next","awrap","connect","MONGO_URI","useNewUrlParser","sent","connection","host","t0","console","error","message","exit","stop","on","_context2","useUnifiedTopology","log","startServer","PORT","_context3","listen","concat"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,SAAWD,QAAQ,YADnBD,KAAOC,QAAU,QAGjBE,OAASF,QAAQ,UAFjBC,OAAWD,QAAQ,UAMzBE,OAAOC,sBADPH,QAAA,wBAFMI,6BAAAA,8BAO6BJ,QAAQ,8BAAnCK,uBAAAA,aAAcC,mBAAAA,mBACKN,QAAQ,6BAA3BO,yBAAAA,eAGFC,WAL0BR,QAAQ,uBAAhCS,WAAAA,QAMmB,uBAG3BA,sBAEA,IAAMC,IAAMX,UAGZW,IAAIC,IAAIP,OAAO,CACbQ,sBAAuB,CAVnBJ,WAAU,CAYVK,WAAY,CAAC,UAXbC,SAAU,CAAGd,SAAQ,mBAarBe,UAAW,CAAC,UACZC,OAAQ,CAAC,SAAU,QAAS,eAJ9BC,IAAAA,YAAY,CACVJ,OADU,eACVA,QAAYK,IAACC,SACbC,CAAAA,oCACAL,CAAAA,wBAHU,yBAIVC,aAAS,EAJCK,qBAAA,KAFDX,IAmBXC,IARJW,KAAAC,cAEEC,IAAAA,IAAMjB,gBAINc,IAAAA,IAAAA,QAAAA,KAAAA,CAAoBI,MAAE,UALJf,IAApBC,IAAAZ,QAAA2B,WAAA,CAAAC,UAAA,EAAAF,MAAA,UAUAf,IAAIC,IAAIJ,YAAAA,YAQRG,IAAIC,IAAI,aAAcG,YALDJ,IAArBkB,IAAA,UAAA,SAAAC,EAAAC,GACApB,EAAIC,OAAIZ,KAAQ2B,KAAAA,CAAaC,OAAU,KAAMF,WAAO,IAAAM,MAAAC,cAWhDC,OATJC,QAAAD,aAKAvB,IAAIkB,IAAItB,UAGJ6B,IAAAA,IAAAA,cAGH,IAEDC,UAAA,WAAA,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAGA1C,SAAA2C,QAAAV,QAAAhB,IAAA2B,UAAA,CAOMC,iBAAiB,EANnBnC,oBAEJ,KANA,KAAA,EACQL,EADRkC,EAAAO,KAOMX,QAAAA,IAAAA,wBAAAA,OAAYC,EAAAW,WAAAC,OAPlBT,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAU,GAAAV,EAAA,MAAA,GAOkBW,QAAAC,MAAA,8BAAAZ,EAAAU,GAAAG,SAAAnB,QAAAoB,KAAA,GAPlB,KAAA,GAAA,IAAA,MAAA,OAAAd,EAAAe,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAOkBrB,QAAAsB,GAAA,SAAA,WAAA,OAAAlB,mBAAAC,MAAA,SAAAkB,GAAA,OAAA,OAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,KAAA,EAAA,OAGZI,QAAAA,IAAAA,oCAHYW,EAAAf,KAAA,EAAAJ,mBAAAK,MAIZe,SAAAA,WAAAA,SAJY,KAAA,EAE6CP,QAAAQ,IAF7C,+BAkBhBzB,QAAQoB,KAAK,GAlBG,KAAA,EAAA,IAAA,MAAA,OAAAG,EAAAF,YAAA,IAAAK,YAAA,WAAA,IAAAC,EAAA,OAAAvB,mBAAAC,MAAA,SAAAuB,GAAA,OAAA,OAAAA,EAAArB,KAAAqB,EAAApB,MAAA,KAAA,EAAA,OAAAoB,EAAApB,KAAA,EAAAJ,mBAAAK,MAAAP,aAAA,KAAA,EAAAyB,EAAA3B,QAAAhB,IAAA2C,MAAA,IAAAnD,IAAAqD,OAAAF,EAAA,WAAAV,QAAAQ,IAAA,6BAAAK,OAAAH,IAQdV,QAAAA,IAAAA,mBAAAA,OAAcjB,QAAAhB,IAAAC,UAA+B,kBAR/B,KAAA,EAAA,IAAA,MAAA,OAAA2C,EAAAP,WAAAK","file":"server.min.js","sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst cors = require('cors');\r\nconst dotenv = require('dotenv');\r\nconst helmet = require('helmet');\r\n\r\n// Load environment variables first\r\ndotenv.config();\r\n\r\n// Import utilities and middlewares\r\nconst { validateEnvironment } = require('./utils/envValidator');\r\nconst { errorHandler, notFound } = require('./middlewares/errorHandler');\r\nconst { generalLimiter } = require('./middlewares/rateLimiter');\r\n\r\n// Import routes\r\nconst authRoutes = require('./routes/authRoutes');\r\nconst chatRoutes = require('./routes/chatRoutes');\r\n\r\n// Validate environment variables before starting\r\nvalidateEnvironment();\r\n\r\nconst app = express();\r\n\r\n// Security middlewares\r\napp.use(helmet({\r\n  contentSecurityPolicy: {\r\n    directives: {\r\n      defaultSrc: [\"'self'\"],\r\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\r\n      scriptSrc: [\"'self'\"],\r\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\r\n    },\r\n  },\r\n}));\r\n\r\n// CORS configuration - restrict in production\r\nconst corsOptions = {\r\n  origin: process.env.NODE_ENV === 'production' \r\n    ? ['https://your-frontend-domain.com'] // Replace with your actual frontend domain\r\n    : ['http://localhost:3000', 'http://127.0.0.1:3000'],\r\n  credentials: true,\r\n  optionsSuccessStatus: 200\r\n};\r\napp.use(cors(corsOptions));\r\n\r\n// Rate limiting\r\napp.use(generalLimiter);\r\n\r\n// Body parsing middleware\r\napp.use(express.json({ limit: '10mb' }));\r\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\r\n\r\n// API routes\r\napp.use('/api/auth', authRoutes);\r\napp.use('/api/chats', chatRoutes);\r\n\r\n// Health check endpoint\r\napp.get('/health', (req, res) => {\r\n  res.status(200).json({ \r\n    status: 'OK', \r\n    timestamp: new Date().toISOString(),\r\n    uptime: process.uptime()\r\n  });\r\n});\r\n\r\n// 404 handler\r\napp.use(notFound);\r\n\r\n// Global error handler\r\napp.use(errorHandler);\r\n\r\n// MongoDB connection with proper error handling\r\nconst connectDB = async () => {\r\n  try {\r\n    const conn = await mongoose.connect(process.env.MONGO_URI, {\r\n      useNewUrlParser: true,\r\n      useUnifiedTopology: true,\r\n    });\r\n    console.log(`✅ MongoDB Connected: ${conn.connection.host}`);\r\n  } catch (error) {\r\n    console.error('❌ MongoDB connection error:', error.message);\r\n    process.exit(1);\r\n  }\r\n};\r\n\r\n// Graceful shutdown\r\nprocess.on('SIGINT', async () => {\r\n  console.log('\\n🔄 Shutting down gracefully...');\r\n  await mongoose.connection.close();\r\n  console.log('✅ MongoDB connection closed');\r\n  process.exit(0);\r\n});\r\n\r\n// Start server\r\nconst startServer = async () => {\r\n  await connectDB();\r\n  \r\n  const PORT = process.env.PORT || 5000;\r\n  app.listen(PORT, () => {\r\n    console.log(`🚀 Server running on port ${PORT}`);\r\n    console.log(`🌍 Environment: ${process.env.NODE_ENV || 'development'}`);\r\n  });\r\n};\r\n\r\nstartServer();\r\n"]}