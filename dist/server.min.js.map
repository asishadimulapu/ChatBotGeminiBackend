{"version":3,"sources":["server.js"],"names":["express","require","mongoose","dotenv","config","helmet","errorHandler","notFound","generalLimiter","authRoutes","validateEnvironment","app","use","contentSecurityPolicy","defaultSrc","chatRoutes","scriptSrc","imgSrc","directives","env","NODE_ENV","styleSrc","process","CORS_ORIGIN","credentials","optionsSuccessStatus","corsOptions","cors","json","limit","extended","urlencoded","get","req","res","version","status","message","Date","toISOString","connectDB","conn","regeneratorRuntime","async","_context","prev","next","awrap","connect","MONGO_URI","useNewUrlParser","useUnifiedTopology","sent","console","log","concat","connection","host","t0","error","stop","_context2","close","exit","PORT","listen","startServer"],"mappings":"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","file":"server.min.js","sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst cors = require('cors');\r\nconst dotenv = require('dotenv');\r\nconst helmet = require('helmet');\r\n\r\n// Load environment variables first\r\ndotenv.config();\r\n\r\n// Import utilities and middlewares\r\nconst { validateEnvironment } = require('./utils/envValidator');\r\nconst { errorHandler, notFound } = require('./middlewares/errorHandler');\r\nconst { generalLimiter } = require('./middlewares/rateLimiter');\r\n\r\n// Import routes\r\nconst authRoutes = require('./routes/authRoutes');\r\nconst chatRoutes = require('./routes/chatRoutes');\r\n\r\n// Validate environment variables before starting\r\nvalidateEnvironment();\r\n\r\nconst app = express();\r\n\r\n// Security middlewares\r\napp.use(helmet({\r\n  contentSecurityPolicy: {\r\n    directives: {\r\n      defaultSrc: [\"'self'\"],\r\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\r\n      scriptSrc: [\"'self'\"],\r\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\r\n    },\r\n  },\r\n}));\r\n\r\n// CORS configuration - restrict in production\r\nconst corsOptions = {\r\n  origin: process.env.NODE_ENV === 'production' \r\n    ? [\r\n        'https://chat-bot-gemini-frontend.vercel.app', \r\n        'https://chat-bot-gemini-frontend-662zruhd3-asishadimulapus-projects.vercel.app',\r\n        process.env.CORS_ORIGIN\r\n      ] \r\n    : ['http://localhost:3000', 'http://127.0.0.1:3000'],\r\n  credentials: true,\r\n  optionsSuccessStatus: 200\r\n};\r\napp.use(cors(corsOptions));\r\n\r\n// Rate limiting\r\napp.use(generalLimiter);\r\n\r\n// Body parsing middleware\r\napp.use(express.json({ limit: '10mb' }));\r\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\r\n\r\n// API routes\r\napp.use('/api/auth', authRoutes);\r\napp.use('/api/chats', chatRoutes);\r\n\r\n// Root route\r\napp.get('/', (req, res) => {\r\n  res.status(200).json({ \r\n    message: 'ChatBot API Server is running! 🤖',\r\n    version: '1.0.0',\r\n    endpoints: {\r\n      auth: '/api/auth',\r\n      chats: '/api/chats',\r\n      health: '/health'\r\n    }\r\n  });\r\n});\r\n\r\n// Health check endpoint\r\napp.get('/health', (req, res) => {\r\n  res.status(200).json({ \r\n    status: 'OK', \r\n    timestamp: new Date().toISOString(),\r\n    uptime: process.uptime()\r\n  });\r\n});\r\n\r\n// 404 handler\r\napp.use(notFound);\r\n\r\n// Global error handler\r\napp.use(errorHandler);\r\n\r\n// MongoDB connection with proper error handling\r\nconst connectDB = async () => {\r\n  try {\r\n    const conn = await mongoose.connect(process.env.MONGO_URI, {\r\n      useNewUrlParser: true,\r\n      useUnifiedTopology: true,\r\n    });\r\n    console.log(`✅ MongoDB Connected: ${conn.connection.host}`);\r\n  } catch (error) {\r\n    console.error('❌ MongoDB connection error:', error.message);\r\n    process.exit(1);\r\n  }\r\n};\r\n\r\n// Graceful shutdown\r\nprocess.on('SIGINT', async () => {\r\n  console.log('\\n🔄 Shutting down gracefully...');\r\n  await mongoose.connection.close();\r\n  console.log('✅ MongoDB connection closed');\r\n  process.exit(0);\r\n});\r\n\r\n// Start server\r\nconst startServer = async () => {\r\n  await connectDB();\r\n  \r\n  const PORT = process.env.PORT || 5000;\r\n  app.listen(PORT, () => {\r\n    console.log(`🚀 Server running on port ${PORT}`);\r\n    console.log(`🌍 Environment: ${process.env.NODE_ENV || 'development'}`);\r\n  });\r\n};\r\n\r\nstartServer();\r\n"]}