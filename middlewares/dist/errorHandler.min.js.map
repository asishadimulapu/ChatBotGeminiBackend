{"version":3,"sources":["errorHandler.js"],"names":["errorHandler","err","req","res","console","error","code","field","Object","keys","keyValue","status","json","msg","concat","charAt","toUpperCase","slice","errors","values","map","message","name","statusCode","process","env","NODE_ENV","_objectSpread","stack","notFound","module"],"mappings":"wuBACA,IAAMA,aAAe,SAACC,EAAKC,EAAKC,GAI9B,GAHAC,QAAQC,MAAM,SAAUJ,GAGP,OAAbA,EAAIK,KAAgB,CACtB,IAAMC,EAAQC,OAAOC,KAAKR,EAAIS,UAAU,GACxC,OAAOP,EAAIQ,OAAO,KAAKC,KAAK,CAPhCC,IAAA,GAAAC,OAAAP,EAAAQ,OAAA,GAAAC,cAAAT,EAAAU,MAAA,GAAA,qBAMI,GAAcT,oBAAdP,EAAMM,KAAwBG,CAC9B,IAAAQ,EAAWP,OAAJQ,OAAqBlB,EAAAiB,QAAAE,IAAA,SAAAf,GAAA,OAAAA,EAAAgB,UAC1BR,OAAGV,EAAAQ,OAAKJ,KAAMQ,KAAAA,CADhBF,IAAA,oBAKFK,OAAAA,IAEoD,GAAUG,sBAAVpB,EAAAqB,KAAA,OAAlDnB,EAAAQ,OAAA,KAAAC,KAAA,CAAAC,IAAA,kBAGEK,GAAAA,sBAAAA,EAAAA,KAF0B,OAA5Bf,EAAAQ,OAAA,KAAAC,KAAA,CAAAC,IAAA,kBAOF,GAAiB,eAAbZ,EAAIqB,MAA8B,kBAArBrB,EAAjBqB,KACE,OAAOnB,EAAIQ,OAAO,KAAKC,KAAK,CAAAC,IAAA,8BAa9B,IAAMU,EAAatB,EAAIsB,YAAc,IAVjCtB,EAAkC,eAAlCuB,QAAaC,IAAAC,SACf,uBAA8Bb,EAAGQ,QAClClB,EAEDQ,OAAAY,GAAAX,KAFCe,cAAA,CAcCd,IAAKQ,GACwB,gBAAzBG,QAAQC,IAAIC,UAA8B,CAAEE,MAAO3B,EAAI2B,UAR7DC,SAAA,SAAA3B,EAAAC,GAcAA,EAAIQ,OAAO,KAAKC,KAAK,CAAEC,IAAK,qBAZ5BiB,OAAMT,QAAUG,CAAAA,aAAAA,aAAYE,SAAAA","file":"errorHandler.min.js","sourcesContent":["// Global error handling middleware\r\nconst errorHandler = (err, req, res, next) => {\r\n  console.error('Error:', err);\r\n\r\n  // Mongoose duplicate key error\r\n  if (err.code === 11000) {\r\n    const field = Object.keys(err.keyValue)[0];\r\n    return res.status(400).json({\r\n      msg: `${field.charAt(0).toUpperCase() + field.slice(1)} already exists`\r\n    });\r\n  }\r\n\r\n  // Mongoose validation error\r\n  if (err.name === 'ValidationError') {\r\n    const errors = Object.values(err.errors).map(error => error.message);\r\n    return res.status(400).json({\r\n      msg: 'Validation failed',\r\n      errors\r\n    });\r\n  }\r\n\r\n  // JWT errors\r\n  if (err.name === 'JsonWebTokenError') {\r\n    return res.status(401).json({ msg: 'Invalid token' });\r\n  }\r\n\r\n  if (err.name === 'TokenExpiredError') {\r\n    return res.status(401).json({ msg: 'Token expired' });\r\n  }\r\n\r\n  // MongoDB connection errors\r\n  if (err.name === 'MongoError' || err.name === 'MongooseError') {\r\n    return res.status(500).json({ msg: 'Database connection error' });\r\n  }\r\n\r\n  // Default error\r\n  const statusCode = err.statusCode || 500;\r\n  const message = process.env.NODE_ENV === 'production' \r\n    ? 'Something went wrong' \r\n    : err.message;\r\n\r\n  res.status(statusCode).json({\r\n    msg: message,\r\n    ...(process.env.NODE_ENV === 'development' && { stack: err.stack })\r\n  });\r\n};\r\n\r\n// 404 handler\r\nconst notFound = (req, res) => {\r\n  res.status(404).json({ msg: 'Route not found' });\r\n};\r\n\r\nmodule.exports = { errorHandler, notFound };\r\n"]}