{"version":3,"sources":["validation.js"],"names":["require","body","validationResult","handleValidationErrors","req","res","next","errors","isEmpty","status","json","msg","array","validateRegistration","trim","isLength","min","max","withMessage","isEmail","normalizeEmail","matches","validateLogin","notEmpty","validateChatPrompt","module","exports"],"mappings":";;eAAmCA,OAAO,CAAC,mBAAD,C;IAAlCC,I,YAAAA,I;IAAMC,gB,YAAAA,gB,EAEd;;;AACA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjD,MAAMC,MAAM,GAAGL,gBAAgB,CAACE,GAAD,CAA/B;;AACA,MAAI,CAACG,MAAM,CAACC,OAAP,EAAL,EAAuB;AACrB,WAAOH,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,MAAAA,GAAG,EAAE,mBADqB;AAE1BJ,MAAAA,MAAM,EAAEA,MAAM,CAACK,KAAP;AAFkB,KAArB,CAAP;AAID;;AACDN,EAAAA,IAAI;AACL,CATD,C,CAWA;;;AACA,IAAMO,oBAAoB,GAAG,CAC3BZ,IAAI,CAAC,MAAD,CAAJ,CACGa,IADH,GAEGC,QAFH,CAEY;AAAEC,EAAAA,GAAG,EAAE,CAAP;AAAUC,EAAAA,GAAG,EAAE;AAAf,CAFZ,EAGGC,WAHH,CAGe,0CAHf,CAD2B,EAK3BjB,IAAI,CAAC,OAAD,CAAJ,CACGkB,OADH,GAEGC,cAFH,GAGGF,WAHH,CAGe,8BAHf,CAL2B,EAS3BjB,IAAI,CAAC,UAAD,CAAJ,CACGc,QADH,CACY;AAAEC,EAAAA,GAAG,EAAE;AAAP,CADZ,EAEGE,WAFH,CAEe,6CAFf,EAGGG,OAHH,CAGW,iEAHX,EAIGH,WAJH,CAIe,kHAJf,CAT2B,EAc3Bf,sBAd2B,CAA7B,C,CAiBA;;AACA,IAAMmB,aAAa,GAAG,CACpBrB,IAAI,CAAC,OAAD,CAAJ,CACGkB,OADH,GAEGC,cAFH,GAGGF,WAHH,CAGe,8BAHf,CADoB,EAKpBjB,IAAI,CAAC,UAAD,CAAJ,CACGsB,QADH,GAEGL,WAFH,CAEe,sBAFf,CALoB,EAQpBf,sBARoB,CAAtB,C,CAWA;;AACA,IAAMqB,kBAAkB,GAAG,CACzBvB,IAAI,CAAC,QAAD,CAAJ,CACGa,IADH,GAEGC,QAFH,CAEY;AAAEC,EAAAA,GAAG,EAAE,CAAP;AAAUC,EAAAA,GAAG,EAAE;AAAf,CAFZ,EAGGC,WAHH,CAGe,8CAHf,CADyB,EAKzBf,sBALyB,CAA3B;AAQAsB,MAAM,CAACC,OAAP,GAAiB;AACfb,EAAAA,oBAAoB,EAApBA,oBADe;AAEfS,EAAAA,aAAa,EAAbA,aAFe;AAGfE,EAAAA,kBAAkB,EAAlBA,kBAHe;AAIfrB,EAAAA,sBAAsB,EAAtBA;AAJe,CAAjB","sourcesContent":["const { body, validationResult } = require('express-validator');\r\n\r\n// Validation middleware to check for errors\r\nconst handleValidationErrors = (req, res, next) => {\r\n  const errors = validationResult(req);\r\n  if (!errors.isEmpty()) {\r\n    return res.status(400).json({\r\n      msg: 'Validation failed',\r\n      errors: errors.array()\r\n    });\r\n  }\r\n  next();\r\n};\r\n\r\n// User registration validation\r\nconst validateRegistration = [\r\n  body('name')\r\n    .trim()\r\n    .isLength({ min: 2, max: 50 })\r\n    .withMessage('Name must be between 2 and 50 characters'),\r\n  body('email')\r\n    .isEmail()\r\n    .normalizeEmail()\r\n    .withMessage('Please provide a valid email'),\r\n  body('password')\r\n    .isLength({ min: 8 })\r\n    .withMessage('Password must be at least 8 characters long')\r\n    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/)\r\n    .withMessage('Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character'),\r\n  handleValidationErrors\r\n];\r\n\r\n// User login validation\r\nconst validateLogin = [\r\n  body('email')\r\n    .isEmail()\r\n    .normalizeEmail()\r\n    .withMessage('Please provide a valid email'),\r\n  body('password')\r\n    .notEmpty()\r\n    .withMessage('Password is required'),\r\n  handleValidationErrors\r\n];\r\n\r\n// Chat prompt validation\r\nconst validateChatPrompt = [\r\n  body('prompt')\r\n    .trim()\r\n    .isLength({ min: 1, max: 1000 })\r\n    .withMessage('Prompt must be between 1 and 1000 characters'),\r\n  handleValidationErrors\r\n];\r\n\r\nmodule.exports = {\r\n  validateRegistration,\r\n  validateLogin,\r\n  validateChatPrompt,\r\n  handleValidationErrors\r\n};\r\n"],"file":"validation.dev.js"}