{"version":3,"sources":["validation.js"],"names":["require","body","validationResult","req","res","next","errors","isEmpty","status","json","handleValidationErrors","validateRegistration","isLength","min","max","withMessage","normalizeEmail","matches","validateLogin","module","exports","validateChatPrompt","notEmpty","trim"],"mappings":"0BAAmCA,QAAQ,qBAAnCC,cAAAA,KAAMC,0BAAAA,iBAAND,uBAGuB,SAACE,EAAKC,EAAKC,GACxC,IAJYH,EAAAA,iBAAAA,GAKZ,IAAKI,EAAOC,UACV,OAAOH,EAAII,OAAO,KAAKC,KAAK,CAH1BC,IAAAA,oBACEJ,OAAMA,EAAGJ,UAEbG,KAIDM,qBAAA,CAMDV,KAAK,QALLI,OAGFO,SAAA,CAAAC,IAAA,EAAAC,IAAA,KAKKC,YAAY,4CACfd,KAAK,SALDU,UAGaK,iBAAQD,YAAE,gCAF3Bd,KAGGc,YAMcH,SAAE,CAAAC,IAAA,IAChBE,YAAY,+CACZE,QAAQ,mEAMPC,YAAa,oHAJjBR,wBAoBGK,cAAY,CAIjBI,KAAOC,SACLT,UACAO,iBACAG,YAAAA,gCACAX,KAAAA,YAJFY,WAbKP,YAAY,wBACfL,wBAIIW,mBAAqB,CACzBpB,KAAK,UACFsB,OACAX,SAAS,CAAEC,IAAK,EAAGC,IAAK,MACxBC,YAAY,gDACfL,wBAGFS,OAAOC,QAAU,CACfT,qBAAAA,qBACAO,cAAAA,cACAG,mBAAAA,mBACAX,uBAAAA","file":"validation.min.js","sourcesContent":["const { body, validationResult } = require('express-validator');\r\n\r\n// Validation middleware to check for errors\r\nconst handleValidationErrors = (req, res, next) => {\r\n  const errors = validationResult(req);\r\n  if (!errors.isEmpty()) {\r\n    return res.status(400).json({\r\n      msg: 'Validation failed',\r\n      errors: errors.array()\r\n    });\r\n  }\r\n  next();\r\n};\r\n\r\n// User registration validation\r\nconst validateRegistration = [\r\n  body('name')\r\n    .trim()\r\n    .isLength({ min: 2, max: 50 })\r\n    .withMessage('Name must be between 2 and 50 characters'),\r\n  body('email')\r\n    .isEmail()\r\n    .normalizeEmail()\r\n    .withMessage('Please provide a valid email'),\r\n  body('password')\r\n    .isLength({ min: 8 })\r\n    .withMessage('Password must be at least 8 characters long')\r\n    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/)\r\n    .withMessage('Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character'),\r\n  handleValidationErrors\r\n];\r\n\r\n// User login validation\r\nconst validateLogin = [\r\n  body('email')\r\n    .isEmail()\r\n    .normalizeEmail()\r\n    .withMessage('Please provide a valid email'),\r\n  body('password')\r\n    .notEmpty()\r\n    .withMessage('Password is required'),\r\n  handleValidationErrors\r\n];\r\n\r\n// Chat prompt validation\r\nconst validateChatPrompt = [\r\n  body('prompt')\r\n    .trim()\r\n    .isLength({ min: 1, max: 1000 })\r\n    .withMessage('Prompt must be between 1 and 1000 characters'),\r\n  handleValidationErrors\r\n];\r\n\r\nmodule.exports = {\r\n  validateRegistration,\r\n  validateLogin,\r\n  validateChatPrompt,\r\n  handleValidationErrors\r\n};\r\n"]}